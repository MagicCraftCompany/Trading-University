generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                       String        @id @default(cuid())
  email                    String        @unique
  password                 String?
  name                     String?
  image                    String?
  authProvider             AuthProvider  @default(GOOGLE)
  googleId                 String?       @unique
  stripeCustomerId         String?       @unique
  youTubeMembershipVerified Boolean       @default(false)
  youTubeMembershipVerifiedAt DateTime?
  youtubeAccessToken       String?
  youtubeRefreshToken      String?
  youtubeTokenExpiry       DateTime?
  youtubeChannelId         String?
  createdAt                DateTime      @default(now())
  updatedAt                DateTime      @updatedAt
  lastLoginAt              DateTime?
  subscription             Subscription?
  sentMessages             Message[]     @relation("SentMessages")
  receivedMessages         Message[]     @relation("ReceivedMessages")
  chatMembers              ChatMember[]
}

model Subscription {
  id                   String             @id @default(cuid())
  userId               String             @unique
  status               SubscriptionStatus @default(ACTIVE)
  stripeSubscriptionId String?            @unique
  currentPeriodStart   DateTime           @default(now())
  currentPeriodEnd     DateTime?
  cancelAtPeriodEnd    Boolean            @default(false)
  createdAt            DateTime           @default(now())
  updatedAt            DateTime           @updatedAt
  user                 User               @relation(fields: [userId], references: [id])
}

model Chat {
  id        String       @id @default(cuid())
  type      ChatType     @default(GROUP)
  name      String?
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  messages  Message[]
  members   ChatMember[]
}

model ChatMember {
  id        String   @id @default(cuid())
  userId    String
  chatId    String
  role      ChatRole @default(MEMBER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
  chat      Chat     @relation(fields: [chatId], references: [id])

  @@unique([userId, chatId])
}

model Message {
  id         String   @id @default(cuid())
  content    String
  senderId   String
  receiverId String?
  chatId     String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  sender     User     @relation("SentMessages", fields: [senderId], references: [id])
  receiver   User?    @relation("ReceivedMessages", fields: [receiverId], references: [id])
  chat       Chat?    @relation(fields: [chatId], references: [id])
}

enum AuthProvider {
  GOOGLE
}

enum SubscriptionStatus {
  ACTIVE
  EXPIRED
  CANCELLED
}

enum ChatType {
  DIRECT
  GROUP
}

enum ChatRole {
  ADMIN
  MEMBER
  SUPPORT
}

// New model for admin settings
model AdminSettings {
  id        String   @id @default(cuid())
  key       String   @unique
  value     String   @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
